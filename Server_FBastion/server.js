// server.js

// --- –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π ---
const WebSocket = require('ws');
const crypto = require('crypto');
const { Pool } = require('pg');

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const port = 8080;

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
const pool = new Pool({
    user: 'postgres',
    host: 'localhost', // –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–∞ —ç—Ç–æ–π –∂–µ –º–∞—à–∏–Ω–µ
    database: 'bastion_db',
    password: '532681034', // <-- –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    port: 5432,
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!', err.stack);
  } else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
  }
});

// --- WebSocket –°–µ—Ä–≤–µ—Ä ---
// –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'host', —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ (0.0.0.0)
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ localhost, —Ç–∞–∫ –∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.10)
const wss = new WebSocket.Server({ port });

console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port} –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.`);

// --- –õ–æ–≥–∏–∫–∞ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞ ---
wss.on('connection', ws => {
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.');

    ws.on('message', async (message) => {
        try {
            const data = JSON.parse(message);
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:', data);

            switch (data.action) {
                // --- –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
                case 'create_account': {
                    const login = `Player${Math.floor(100000 + Math.random() * 900000)}`;
                    const token = crypto.randomBytes(16).toString('hex');
                    // ... –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                    const newUserQuery = 'INSERT INTO players(player_id, username, hero_name, token, last_login) VALUES($1, $2, $3, $4, NOW()) RETURNING player_id';
                    const values = [login, login, login, token];
                    
                    const result = await pool.query(newUserQuery, values);
                    
                    console.log(`[DB] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${result.rows[0].player_id}`);

                    ws.send(JSON.stringify({
                        action: 'create_account_success',
                        player_id: login,
                        player_name: login,
                        token: token
                    }));
                    break;
                }
                
                // --- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–æ–∫–µ–Ω—É ---
                case 'login_with_token': {
                    const { player_id, token } = data;
                    const loginQuery = 'SELECT * FROM players WHERE player_id = $1 AND token = $2';
                    const result = await pool.query(loginQuery, [player_id, token]);

                    if (result.rows.length > 0) {
                        console.log(`[Auth] –ò–≥—Ä–æ–∫ ${player_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª.`);
                        ws.send(JSON.stringify({
                            action: 'login_success',
                            player_data: result.rows[0],
                        }));
                    } else {
                        console.log(`[Auth] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è: ${player_id}`);
                        ws.send(JSON.stringify({ action: 'login_failed' }));
                    }
                    break;
                }

                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', data.action);
                    ws.send(JSON.stringify({ action: 'error', message: 'Unknown action' }));
                    break;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            ws.send(JSON.stringify({ action: 'error', message: 'Invalid message format' }));
        }
    });

    ws.on('close', () => {
        console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è.');
    });
});
